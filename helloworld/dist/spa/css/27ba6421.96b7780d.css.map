{"version":3,"sources":["webpack:///./src/components/src/components/CanvasTextRender.vue"],"names":[],"mappings":";AAeA;IACA;IACA;IACA;AACA;AACA;IACA;IACA;AACA","file":"css/27ba6421.96b7780d.css","sourcesContent":["<template>\n    <div class=\"canvas-text-render\">\n        <!-- :width=\"width\" -->\n        <canvas\n            ref=\"canvas\"\n        >\n            {{ value }}\n        </canvas>\n        <div>\n            {{ width }}x{{ height }}\n        </div>\n    </div>\n</template>\n\n<style>\n    .canvas-text-render canvas {\n        display: block;\n        margin: 0 auto;\n        border: 1px solid black;\n    }\n    .canvas-text-render div {\n        margin: 0 auto;\n        text-align: center;\n    }\n</style>\n\n<script>\nexport default {\n    // name: 'CanvasTextRender',\n    // props: ['value', 'font', 'width', 'height'],\n    props: {\n        value: {\n            type: String,\n            default: ''\n        },\n        fontFamily: {\n            type: String,\n            default: 'sans'\n        },\n        fontSize: {\n            type: Number,\n            default: 11\n        },\n        fontWeight: {\n            type: Number,\n            default: 500\n        },\n        fontStyle: {\n            type: String,\n            default: ''\n        },\n        // width: {\n        //     type: Number,\n        //     default: 44\n        // }\n        height: {\n            type: Number,\n            default: 11\n        }\n    },\n    data () {\n        return {\n            testmessage: '01:42 Hello World :-)',\n            width: 100\n            // height: 10\n        }\n    },\n    computed: {\n        // https://developer.mozilla.org/en-US/docs/Web/CSS/font\n        font: function () {\n            let font = ''\n            font += this.fontStyle + ' '\n            font += this.fontWeight + ' '\n            font += this.height + 'px'\n            // font += ' ' + this.fontSize\n            font += ' \"' + this.fontFamily + '\"'\n            return font\n        }\n        // },\n        // width: function () {\n        //     let textWidth = 200\n        //     if (this.$refs.canvas) {\n        //         console.log('this.$refs.canvas', this.$refs.canvas)\n        //         const ctx = this.$refs.canvas.getContext('2d')\n        //         textWidth = ctx.measureText(this.value).width\n        //     }\n        //     console.log('textWidth', textWidth)\n        //     return textWidth\n        //     // return 100\n        // }\n    },\n    methods: {\n        updateCanvas: function () {\n            // console.log('this', this)\n            const canvas = this.$refs.canvas\n            if (canvas) {\n                const ctx = canvas.getContext('2d')\n\n                // get new width\n                let textWidth = ctx.measureText(this.value).width\n                this.width = textWidth\n                // ^- fires after updateCanvas is done and so clears the canvas..\n                canvas.width = textWidth\n                // console.log('textWidth', textWidth)\n\n                // clean up\n                ctx.clearRect(0, 0, canvas.width, canvas.height)\n\n                // console.log('this.font', this.font)\n                // render\n                ctx.fillStyle = 'black'\n                ctx.font = this.font\n                ctx.fillText(this.value, 0, this.height - 1)\n            }\n        }\n    },\n    watch: {\n        value: function () {\n            this.updateCanvas()\n        },\n        font: function () {\n            this.updateCanvas()\n            this.updateCanvas()\n        },\n        height: function (value) {\n            const canvas = this.$refs.canvas\n            if (canvas) {\n                canvas.height = value\n            }\n            this.updateCanvas()\n        }\n        // width: function () {\n        //     this.updateCanvas()\n        // }\n    },\n    mounted: function () {\n        const canvas = this.$refs.canvas\n        if (canvas) {\n            canvas.height = this.height\n            canvas.width = this.width\n        }\n        this.updateCanvas()\n        this.updateCanvas()\n    }\n}\n</script>\n"],"sourceRoot":""}