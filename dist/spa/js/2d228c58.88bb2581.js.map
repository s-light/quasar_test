{"version":3,"sources":["webpack:///./src/pages/mytests/serial.vue?0bd3","webpack:///src/pages/mytests/serial.vue","webpack:///./src/pages/mytests/serial.vue?5f54","webpack:///./src/pages/mytests/serial.vue"],"names":["dummyResponder","vendorId","productId","comName","pnpId","locationId","serialNumber","manufacturer","product","release","undefined","interface","usagePage","usage","mytests_serialvue_type_script_lang_js_","name","data","serialAvailable","device","parser","deviceList","deviceSelected","deviceIsOpen","deviceSearching","deviceConnecting","messagaeToSend","log","methods","toggleConnect","console","group","this","deviceClose","deviceOpen","groupEnd","_this","concat","startsWith","setTimeout","SerialPort","baudRate","pipe","on","isOpen","e","error","_this2","close","messageSend","_this3","recMessage","messageReceive","write","$refs","mylog","addEntryOut","value","addEntryIn","search","_this4","list","then","devices","dummyResponderNew","Object","extend","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","push","err","return","length","computed","testthings","result","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","port","mounted","_this5","Readline","parsers","line","beforeDestroy","filters","components","LogView","component","componentNormalizer","_vm","_h","$createElement","_c","_self","staticClass","staticStyle","align-items","min-width","background","attrs","rounded","outlined","label","disable","option-label","item","option-value","options","scopedSlots","_u","key","fn","scope","_g","_b","itemProps","itemEvents","_v","_s","opt","caption","proxy","flat","round","dense","hint","icon","loading","click","$event","model","callback","$$v","expression","style","opacity","ref","show-demo-data","update:log","filled","keyup","type","indexOf","_k","keyCode","directives","rawName","__webpack_exports__"],"mappings":"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","file":"js/2d228c58.88bb2581.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('q-page',{staticClass:\"flex column\",staticStyle:{\"align-items\":\"center\"}},[_c('section',{staticClass:\"q-mt-md row justify-around items-center \"},[_c('q-select',{staticClass:\"q-mr-md\",staticStyle:{\"min-width\":\"12em\",\"background\":\"transparent\"},attrs:{\"rounded\":\"\",\"outlined\":\"\",\"label\":\"Device\",\"disable\":_vm.deviceIsOpen,\"option-label\":function (item) { return item.comName; },\"option-value\":function (item) { return item; },\"options\":_vm.deviceList},scopedSlots:_vm._u([{key:\"option\",fn:function(scope){return [_c('q-item',_vm._g(_vm._b({},'q-item',scope.itemProps,false),scope.itemEvents),[_c('q-item-section',[_c('q-item-label',[_vm._v(\"\\n                            \"+_vm._s(scope.opt.comName)+\"\\n                        \")]),_c('q-item-label',{attrs:{\"caption\":\"\"}},[_vm._v(\"\\n                            \"+_vm._s(scope.opt.pnpId)+\"\\n                        \")]),_c('q-item-label',{attrs:{\"caption\":\"\"}},[_vm._v(\"\\n                            \"+_vm._s(scope.opt.manufacturer)+\"\\n                        \")]),_c('q-item-label',{attrs:{\"caption\":\"\"}},[_vm._v(\"\\n                            vendorId:\"+_vm._s(scope.opt.vendorId)+\"\\n                        \")]),_c('q-item-label',{attrs:{\"caption\":\"\"}},[_vm._v(\"\\n                            productId:\"+_vm._s(scope.opt.productId)+\"\\n                        \")]),_c('q-item-label',{attrs:{\"caption\":\"\"}},[_vm._v(\"\\n                            serialNumber:\"+_vm._s(scope.opt.serialNumber)+\"\\n                        \")])],1)],1)]}},{key:\"no-option\",fn:function(){return [_c('q-item',[_c('q-item-section',[_vm._v(\"\\n                        No Devices\\n                    \")])],1)]},proxy:true},{key:\"append\",fn:function(){return [_c('q-btn',{attrs:{\"flat\":\"\",\"round\":\"\",\"dense\":\"\",\"hint\":\"search devices\",\"icon\":\"refresh\",\"disable\":_vm.deviceIsOpen,\"loading\":_vm.deviceSearching},on:{\"click\":function($event){return _vm.search()}},scopedSlots:_vm._u([{key:\"loading\",fn:function(){return [_c('q-spinner-radio')]},proxy:true}])})]},proxy:true}]),model:{value:(_vm.deviceSelected),callback:function ($$v) {_vm.deviceSelected=$$v},expression:\"deviceSelected\"}}),_c('q-btn',{style:({opacity: (_vm.deviceSelected ? 'inherit' : '0.05')}),attrs:{\"rounded\":\"\",\"icon\":_vm.deviceIsOpen ? 'phonelink_off' : 'phonelink',\"loading\":_vm.deviceConnecting,\"label\":_vm.deviceIsOpen ? 'disconnect' : 'connect',\"disable\":!_vm.deviceSelected},on:{\"click\":function($event){return _vm.toggleConnect()}},scopedSlots:_vm._u([{key:\"loading\",fn:function(){return [_c('q-spinner-gears')]},proxy:true},{key:\"after\",fn:function(){return [_c('q-icon',{attrs:{\"name\":\"close\"}})]},proxy:true}])})],1),_c('section',[_c('p',{staticClass:\"q-ma-md\"},[_vm._v(\"\\n            \"+_vm._s(_vm.deviceSelected)+\"\\n        \")])]),_c('LogView',{ref:\"mylog\",staticClass:\"q-mt-md q-pa-sm\",attrs:{\"show-demo-data\":\"\",\"log\":_vm.log},on:{\"update:log\":function($event){_vm.log=$event}}}),_c('section',{staticClass:\"q-mt-md\",staticStyle:{\"min-width\":\"50vw\"}},[_c('q-input',{attrs:{\"filled\":\"\",\"label\":\"Send Message\",\"disable\":!_vm.deviceIsOpen || _vm.deviceConnecting},on:{\"keyup\":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,\"enter\",13,$event.key,\"Enter\")){ return null; }return _vm.messageSend()}},scopedSlots:_vm._u([{key:\"append\",fn:function(){return [_c('q-icon',{staticClass:\"cursor-pointer\",style:({opacity: (_vm.messagaeToSend !== '' ? 'inherit' : '0.1')}),attrs:{\"name\":\"close\"},on:{\"click\":function($event){_vm.messagaeToSend = ''}}})]},proxy:true},{key:\"after\",fn:function(){return [_c('q-btn',{directives:[{name:\"ripple\",rawName:\"v-ripple\"}],attrs:{\"round\":\"\",\"dense\":\"\",\"flat\":\"\",\"icon\":\"send\",\"disable\":!_vm.deviceIsOpen || _vm.deviceConnecting},on:{\"click\":function($event){return _vm.messageSend()}}})]},proxy:true}]),model:{value:(_vm.messagaeToSend),callback:function ($$v) {_vm.messagaeToSend=$$v},expression:\"messagaeToSend\"}})],1)],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n    <q-page\n        class=\"flex column\"\n        style=\"align-items: center;\"\n    >\n        <section class=\"q-mt-md row justify-around items-center \">\n            <q-select\n                rounded\n                outlined\n                class=\"q-mr-md\"\n                style=\"min-width:12em; background: transparent\"\n                label=\"Device\"\n                :disable=\"deviceIsOpen\"\n                v-model=\"deviceSelected\"\n                :option-label=\"(item) => item.comName\"\n                :option-value=\"(item) => item\"\n                :options=\"deviceList\"\n            >\n                <template v-slot:option=\"scope\">\n                    <q-item\n                        v-bind=\"scope.itemProps\"\n                        v-on=\"scope.itemEvents\"\n                    >\n                        <q-item-section>\n                            <q-item-label>\n                                {{ scope.opt.comName }}\n                            </q-item-label>\n                            <q-item-label caption>\n                                {{ scope.opt.pnpId }}\n                            </q-item-label>\n                            <q-item-label caption>\n                                {{ scope.opt.manufacturer }}\n                            </q-item-label>\n                            <q-item-label caption>\n                                vendorId:{{ scope.opt.vendorId }}\n                            </q-item-label>\n                            <q-item-label caption>\n                                productId:{{ scope.opt.productId }}\n                            </q-item-label>\n                            <q-item-label caption>\n                                serialNumber:{{ scope.opt.serialNumber }}\n                            </q-item-label>\n                        </q-item-section>\n                    </q-item>\n                </template>\n                <template v-slot:no-option>\n                    <q-item>\n                        <q-item-section>\n                            No Devices\n                        </q-item-section>\n                    </q-item>\n                </template>\n                <template v-slot:append>\n                    <q-btn\n                        flat\n                        round\n                        dense\n                        hint=\"search devices\"\n                        icon=\"refresh\"\n                        :disable=\"deviceIsOpen\"\n                        :loading=\"deviceSearching\"\n                        @click=\"search()\"\n                    >\n                        <template v-slot:loading>\n                            <q-spinner-radio />\n                        </template>\n                    </q-btn>\n                </template>\n            </q-select>\n\n            <q-btn\n                rounded\n                :icon=\"deviceIsOpen ? 'phonelink_off' : 'phonelink'\"\n                :style=\"{opacity: (deviceSelected ? 'inherit' : '0.05')}\"\n                :loading=\"deviceConnecting\"\n                @click=\"toggleConnect()\"\n                :label=\"deviceIsOpen ? 'disconnect' : 'connect'\"\n                :disable=\"!deviceSelected\"\n            >\n                <template v-slot:loading>\n                    <q-spinner-gears />\n                </template>\n                <template v-slot:after>\n                    <q-icon\n                        name=\"close\"\n                    />\n                </template>\n            </q-btn>\n        </section>\n        <section>\n            <p class=\"q-ma-md\">\n                {{ deviceSelected }}\n            </p>\n        </section>\n\n        <LogView\n            class=\"q-mt-md q-pa-sm\"\n            ref=\"mylog\"\n            show-demo-data\n            :log.sync=\"log\"\n        />\n        <section\n            class=\"q-mt-md\"\n            style=\"min-width: 50vw\"\n        >\n            <q-input\n                filled\n                label=\"Send Message\"\n                v-model=\"messagaeToSend\"\n                :disable=\"!deviceIsOpen || deviceConnecting\"\n                @keyup.enter=\"messageSend()\"\n            >\n                <template v-slot:append>\n                    <q-icon\n                        :style=\"{opacity: (messagaeToSend !== '' ? 'inherit' : '0.1')}\"\n                        name=\"close\"\n                        @click=\"messagaeToSend = ''\"\n                        class=\"cursor-pointer\"\n                    />\n                </template>\n                <template v-slot:after>\n                    <q-btn\n                        round\n                        v-ripple\n                        dense\n                        flat\n                        icon=\"send\"\n                        :disable=\"!deviceIsOpen || deviceConnecting\"\n                        @click=\"messageSend()\"\n                    />\n                </template>\n            </q-input>\n        </section>\n    </q-page>\n</template>\n\n<script>\nimport { extend } from 'quasar'\nimport LogView from 'components/LogView.vue'\n\nconst dummyResponder = {\n    vendorId: -1,\n    productId: -1,\n    comName: '/dummyResponder/0',\n    pnpId: -1,\n    locationId: -1,\n    serialNumber: '42',\n    manufacturer: 's-light.eu',\n    product: 'dummyResponder',\n    release: undefined,\n    interface: undefined,\n    usagePage: undefined,\n    usage: undefined\n}\n\nexport default {\n    name: 'PageSerialTest',\n    data () {\n        return {\n            serialAvailable: false,\n            device: undefined,\n            parser: undefined,\n            deviceList: [dummyResponder],\n            // deviceSelected: {\n            //     comName: '',\n            //     pnpId: undefined\n            // },\n            deviceSelected: 'dummyResponder',\n            deviceIsOpen: false,\n            // testXX: 'XXX',\n            deviceSearching: false,\n            deviceConnecting: false,\n            messagaeToSend: 'Hello World :-)',\n            log: undefined\n        }\n    },\n    methods: {\n        toggleConnect () {\n            console.group('toggleConnect()')\n            this.deviceConnecting = true\n            // console.log('this.deviceConnecting', this.deviceConnecting)\n            // console.log('this.deviceIsOpen', this.deviceIsOpen)\n            if (this.deviceIsOpen) {\n                console.log('we will close now..')\n                this.deviceClose()\n                console.log('close done.')\n            } else {\n                console.log('we will open now..')\n                this.deviceOpen()\n            }\n            console.groupEnd()\n        },\n        deviceOpen () {\n            console.group('deviceOpen()')\n            console.log(`this.deviceSelected '${this.deviceSelected}'`)\n            if (this.deviceSelected.comName.startsWith('/dummyResponder/')) {\n                console.log(`this.deviceSelected.comName '${this.deviceSelected.comName}'`)\n                setTimeout(() => {\n                    console.log('done.')\n                    // we're done, we reset loading state\n                    this.deviceConnecting = false\n                    this.deviceIsOpen = true\n                }, 500)\n            } else {\n                if (this.serialAvailable) {\n                    try {\n                        this.device = new SerialPort(\n                            this.deviceSelected.comName, { baudRate: 115200 })\n                        this.device.pipe(this.parser)\n                        this.device.on('open', () => {\n                            // console.log('event open - port.isOpen:', this.device.isOpen)\n                            console.log('event open')\n                            this.deviceIsOpen = this.device.isOpen\n                            this.deviceConnecting = false\n                        })\n                        this.device.on('close', () => {\n                            // console.log('event close - port.isOpen:', this.device.isOpen)\n                            console.log('event close')\n                            this.deviceIsOpen = this.device.isOpen\n                            this.deviceConnecting = false\n                        })\n                    } catch (e) {\n                        console.error('port open failed:\\n', e)\n                        this.deviceConnecting = false\n                    }\n                } else {\n                    this.deviceConnecting = false\n                    console.error('Serial not Available!')\n                }\n            }\n            console.groupEnd()\n        },\n        deviceClose () {\n            if (this.deviceSelected.comName.startsWith('/dummyResponder/')) {\n                setTimeout(() => {\n                    // we're done, we reset loading state\n                    this.deviceConnecting = false\n                    this.deviceIsOpen = false\n                }, 500)\n            } else {\n                // console.log('this.device', this.device)\n                if (this.serialAvailable && this.device) {\n                    this.deviceConnecting = true\n                    this.device.close()\n                    // console.log('this.device', this.device)\n                }\n            }\n        },\n        messageSend () {\n            // console.log('send message:', this.messagaeToSend)\n            if (this.deviceSelected.comName.startsWith('/dummyResponder/')) {\n                const recMessage = this.messagaeToSend\n                setTimeout(() => {\n                    this.messageReceive(recMessage)\n                }, 1000)\n            } else {\n                if (this.serialAvailable) {\n                    this.device.write(this.messagaeToSend + '\\n')\n                }\n            }\n            this.$refs.mylog.addEntryOut(this.messagaeToSend)\n            this.messagaeToSend = ''\n        },\n        messageReceive (value) {\n            this.$refs.mylog.addEntryIn(value)\n        },\n        search () {\n            if (this.serialAvailable) {\n                this.deviceSearching = true\n                SerialPort.list().then(\n                    devices => {\n                        // devices.forEach(console.log)\n                        // reset list\n                        const dummyResponderNew = {}\n                        extend(dummyResponderNew, dummyResponder)\n                        this.deviceList = [dummyResponderNew]\n                        // this.deviceList.push(...devices)\n                        for (let device of devices) {\n                            if (device.vendorId) {\n                                // console.log(device)\n                                this.deviceList.push(device)\n                            }\n                        }\n                        this.deviceSelected = this.deviceList[this.deviceList.length - 1]\n                        this.deviceSearching = false\n                    },\n                    err => {\n                        console.error('serialport.list:', err)\n                        this.deviceSearching = false\n                    }\n                )\n            } else {\n                // simulate a delay\n                setTimeout(() => {\n                    // we're done, we reset loading state\n                    const dummyResponderNew = {}\n                    // https://quasar.dev/quasar-utils/other-utils#(Deep)-Copy-Objects\n                    extend(dummyResponderNew, dummyResponder)\n                    dummyResponderNew.comName = '/dummyResponder/' + this.deviceList.length\n                    dummyResponderNew.serialNumber = 42 + (this.deviceList.length * 100)\n                    dummyResponderNew.product = 'dummyResponder new' + this.deviceList.length\n\n                    this.deviceList.push(dummyResponderNew)\n                    this.deviceSearching = false\n                }, 2000)\n            }\n        }\n    },\n    computed: {\n        testthings: function () {\n            let result = []\n            for (let port of this.deviceList) {\n                result.push(port.comName)\n            }\n            return result\n        }\n    },\n    mounted: function () {\n        // console.group('mounted..')\n        this.deviceSelected = this.deviceList[0]\n        if (SerialPort) {\n            // console.group('setup SerialPort usage')\n            try {\n                const Readline = SerialPort.parsers.Readline\n                this.parser = new Readline()\n                this.parser.on('data', line => this.messageReceive(line))\n                this.serialAvailable = true\n            } catch (e) {\n                this.serialAvailable = false\n                console.error(e)\n            }\n            // console.log('search for devices..')\n            this.search()\n            // console.groupEnd()\n        }\n        // console.groupEnd()\n    },\n    beforeDestroy: function () {\n        console.group('beforeDestroy..')\n        if (this.serialAvailable) {\n            if (this.device && this.device.isOpen) {\n                console.group('close devices.')\n                this.device.close()\n            }\n        }\n        console.groupEnd()\n    },\n    filters: {\n    },\n    components: {\n        LogView\n    }\n}\n\n// https://quasar.dev/quasar-plugins/web-storage\n// this.$q.localStorage.set(key, value)\n// let value = this.$q.localStorage.getItem(key)\n//\n// this.$q.sessionStorage.set(key, value)\n// let value = this.$q.sessionStorage.getItem(key)\n</script>\n\n<style lang=\"stylus\">\n</style>\n","import mod from \"-!../../../node_modules/babel-loader/lib/index.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./serial.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/babel-loader/lib/index.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./serial.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./serial.vue?vue&type=template&id=7367b972&\"\nimport script from \"./serial.vue?vue&type=script&lang=js&\"\nexport * from \"./serial.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"sourceRoot":""}